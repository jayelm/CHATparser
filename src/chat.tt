grammar Chat
        rule chat
           (repeat /
	    description /
            quote /
            repair /
            angle_replacement /
            special_replacement /
            chat_token /
            whitespace )+ {
              def replace
                elements.map do |e|  if not e.empty? then
                                       if e.respond_to?(:replace) then
                                         e.replace
                                       else e.text_value end end end.join('')
              end
            }
          end

       rule repeat
        '[x' [^\]]+ ']' {
            def replace
              ''
            end
          }
        end

       rule description
        '[' ('=' / '%') [^\]]+ ']' {
            def replace
              ''
            end
          }
        end

	rule left_overlap
          ( (('<' content:([^>]+) '>' ) whitespace '[<]') /
            (content:([^ \t]+) whitespace '[<]') ) {
               def replace
                   content.text_value
               end
          }
        end

	rule right_overlap
          ( ( '[>]' whitespace ('<' content:([^>]+) '>' )  ) /
            ( '[>]' whitespace content:([^ \t]+)  ) ) {
               def replace
                   content.text_value
               end
          }
        end

       rule quote
          ( (('<' [^>]+ '>' ) whitespace '["]')  /
            ([^ \t]+ whitespace '["]')  ) {
               def replace
                   '"'
               end
          }
        end

        rule repair
          ( (('<' [^>]+ '>' ) whitespace '[/]') /
            (('<' [^>]+ '>' ) whitespace '[//]') /
            ([^ \t]+ whitespace '[/]') /
            ([^ \t]+ whitespace '[//]') ) {
               def replace
                   ''
               end
          }
        end

        rule special_replacement
          chat_token whitespace '[:' replacement:chat ']' {
              def replace
                replacement.replace
              end
            }
        end

        rule angle_replacement
          '<'  replacement:chat '>' {
              def replace
                replacement.replace
              end
            }
        end

        # This represents a chat token with no spaces.
        rule chat_token
          ( ampersand /
            at_sign /
            other /
            plus_plus /
            plus_comma /
            zero /
            colon /
            brackets /
            parentheses /
            token )+ {
              def replace
                elements.map do |e|  if not e.empty? then
                                       if e.respond_to?(:replace) then
                                         e.replace
                                       else e.text_value end end end.join('')
              end
            }
        end

        rule brackets
            delete_brackets  / replace_brackets
        end

        rule delete_brackets
           ( '[*]' / '[!!]' / '[!]' / '[/]' / '[>]' / '[<]' / '[?]' )  {
            def replace
              ''
            end
          }
        end

        rule replace_brackets
            '['  replacement:([^\]])+ ']' {
              def replace
                replacement.elements.map do |e|  if not e.empty? then
                                       if e.respond_to?(:replace) then
                                         e.replace
                                       else e.text_value end end end.join('')
              end
            }
        end

        rule parentheses
          delete_parentheses / replace_parentheses
        end

        rule delete_parentheses
           ( '(.)' / '(..)' ) {
            def replace
              ''
            end
          }
        end

        rule replace_parentheses
              '('  replacement:([^\)])+ ')'  {
              def replace
                replacement.elements.map do |e|  if not e.empty? then
                                       if e.respond_to?(:replace) then
                                         e.replace
                                       else e.text_value end end end.join('')
              end
            }
        end

        rule ampersand
        '&' [^ \t@\[\]\(\)<>&]+ {
            def replace
              ''
            end
          }
        end

        rule at_sign
        '@' [^ \t@\[\]\(\)<>&]+ {
            def replace
              ''
            end
          }
        end

        rule colon
        ':' {
          def replace
            ''
          end
        }
        end

        rule zero
        '0' {
          def replace
            ''
          end
        }
        end

        rule plus_comma
        '+,' {
          def replace
            ''
          end
        }
        end

        rule other
        '+"' !'/.' {
          def replace
            ''
          end
        }
        end

        rule plus_plus
            '++' {
          def replace
            ''
          end
        }
        end

       rule token [^ \t@\[\]\(\)<>:&0]+ { def replace() text_value end } end
       rule whitespace [ \t]+ { def replace() text_value end } end
end
